{"name":"Js-written-number","tagline":"Convert numbers to their written form.","body":"# js-written-number\r\n[![Build Status](https://secure.travis-ci.org/yamadapc/js-written-number.png?branch=master)](http://travis-ci.org/yamadapc/js-written-number)\r\n[![Code Climate](https://codeclimate.com/github/yamadapc/js-written-number.png)](https://codeclimate.com/github/yamadapc/js-written-number)\r\n[![Coverage Status](https://coveralls.io/repos/yamadapc/js-written-number/badge.png?branch=master)](https://coveralls.io/r/yamadapc/js-written-number?branch=master)\r\n[![Dependency Status](https://david-dm.org/yamadapc/js-written-number.png)](https://david-dm.org/yamadapc/js-written-number)\r\n[![devDependency Status](https://david-dm.org/yamadapc/js-written-number/dev-status.png)](https://david-dm.org/yamadapc/js-written-number#info=devDependencies)\r\n[![Analytics](https://ga-beacon.appspot.com/UA-54450544-1/js-written-number/README)](https://github.com/igrigorik/ga-beacon)\r\n[![npm downloads per month](http://img.shields.io/npm/dm/written-number.svg)](https://www.npmjs.org/package/written-number)\r\n[![npm version](https://img.shields.io/npm/v/written-number.svg)](https://www.npmjs.org/package/written-number)\r\n- - -\r\nConvert numbers to their written form.\r\n\r\n## Install\r\n```bash\r\nnpm i --save written-number\r\n```\r\n\r\n## Usage\r\n```javascript\r\nvar writtenNumber = require('written-number');\r\nwrittenNumber(1234); // => 'one thousand two hundred and thirty-four'\r\n```\r\n\r\n## Options\r\n- `noAnd` - Defaults to `false`. Determines whether to use a separator. The\r\n  separator is internationalized.\r\n- `lang` - Defaults to `'en'`. Determines which language to use.\r\n\r\n## Internationalization\r\n\r\n### Spanish Example\r\n\r\n```javascript\r\nvar writtenNumber = require('written-number');\r\nwrittenNumber(1234, { lang: 'es' }); // => 'mil doscientos treinta y cuatro'\r\n```\r\n\r\n```javascript\r\nvar writtenNumber = require('written-number');\r\nwrittennumber.defaults.lang = 'es';\r\nwrittenNumber(4758); // => 'cuatro mil setecientos cincuenta y ocho'\r\n```\r\n\r\n## Options\r\n\r\nProperty       | Value\r\n-------------- | -------------\r\nnoAnd          | false\r\nlang           | 'en'\r\n\r\n### Configure your own language\r\nEach language has it's own unique grammar exceptions.  You can create your own\r\nlanguage.json file in the folder \"i18n\" and give writtenNumber support for it. I\r\ndon't think the current scheme and logic cover all the cases, but may be cover\r\nsome.\r\n\r\n##### useLongScale:\r\n'Boolean' that indicates if it use [long or short\r\nscale](http://en.wikipedia.org/wiki/Long_and_short_scales). This differs the\r\nmeaning of the words `billion`, `trillion` and so on.\r\n\r\n##### baseSeparator:\r\n'String' that separates the base cardinal numbers.\r\nExample: 29 -> twenty`-`eight. Spanish uses the conector \" y \".\r\n\r\n##### unitSeparator:\r\n'String' that separates the units from the last base cardinal numbers.\r\nExample: 1234 -> one thousand two hundred **and** thirty-four\r\n\r\n##### base:\r\nBase cardinals numbers. Numbers that have unique names and are used to build\r\nothers.\r\n\r\n##### units:\r\nNumber units.\r\nIt can be:\r\n- String\r\n\r\n- Object normal flow. Give support to singular and plural units. English does\r\n  not need this, but spanish does.\r\n\r\n```json\r\n{\r\n  \"singular\": \"mill贸n\",\r\n  \"plural\": \"millones\"\r\n}\r\n```\r\n\r\n- Object with `useBaseInstead` exception.\r\nIn some languages like spanish, specific units like \"ciento\", use the base\r\ncardinal number instead.\r\n\r\nWith `useBaseException` you can also specify with which unit (1 to 9) you don't\r\nwant use the base cardinal instead and use the regular behaviour.\r\n\r\n```json\r\n{\r\n  \"singular\": \"ciento\",\r\n  \"useBaseInstead\": true,\r\n  \"useBaseException\": [1]\r\n}\r\n```\r\n\r\n- Object with `avoidPrefixException` exception.\r\n\r\nIn some languages like spanish, specific units like \"mil\" does not use the base\r\ncardinal number prefix for unit 1.\r\n\r\n```json\r\n{\r\n  \"singular\": \"mil\",\r\n  \"avoidPrefixException\": [1]\r\n}\r\n```\r\n\r\n##### unitExceptions:\r\nSometimes grammar exceptions affect the base cardinal joined to the unit. You\r\ncan set specific exceptions to any base cardinal number.\r\n\r\nSpanish example:\r\n\r\n```\r\nWithout Exception (Wrong): 1232000 -> **uno** mill贸n doscientos treinta y dos mil\r\n```\r\n\r\n```\r\nWith Exception: 1232000 -> **un** mill贸n doscientos treinta y dos mil\r\n```\r\n\r\n### English configuration example\r\n```json\r\n{\r\n  \"useLongScale\": false,\r\n  \"baseSeparator\": \"-\",\r\n  \"unitSeparator\": \"and \",\r\n  \"base\": {\r\n    \"0\": \"zero\",\r\n    \"1\": \"one\",\r\n    \"2\": \"two\",\r\n    \"3\": \"three\",\r\n    ...\r\n    \"90\": \"ninety\"\r\n  },\r\n  \"units\" : [\r\n    \"hundred\",\r\n    \"thousand\",\r\n    \"million\",\r\n    \"billion\",\r\n    \"trillion\",\r\n    ...\r\n    \"quindecillion\"\r\n  ],\r\n  \"unitExceptions\": []\r\n}\r\n```\r\n\r\n### Spanish configuration example\r\n```json\r\n{\r\n  \"useLongScale\": true,\r\n  \"baseSeparator\": \" y \",\r\n  \"unitSeparator\": \"\",\r\n  \"base\": {\r\n    \"0\": \"cero\",\r\n    \"1\": \"uno\",\r\n    \"2\": \"dos\",\r\n    \"3\": \"tres\",\r\n    ...\r\n    \"1000\": \"mil\"\r\n  },\r\n  \"unitExceptions\": {\r\n    \"1\": \"un\"\r\n  },\r\n  \"units\" : [\r\n    {\r\n      \"singular\": \"ciento\",\r\n      \"useBaseInstead\": true,\r\n      \"useBaseException\": [1]\r\n    },\r\n    {\r\n      \"singular\": \"mil\",\r\n      \"avoidPrefixException\": [1]\r\n    },\r\n    {\r\n      \"singular\": \"mill贸n\",\r\n      \"plural\": \"millones\"\r\n    },\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\n## License\r\nThis code is licensed under the MIT license for Pedro Tacla Yamada. For more\r\ninformation, please refer to the [LICENSE](https://github.com/yamadapc/js-written-number/LICENSE) file.\r\n","google":"UA-54450544-1","note":"Don't delete this file! It's used internally to help with page regeneration."}